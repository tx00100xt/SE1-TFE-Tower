
/*  A Bison parser, made from ecc/parser.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	c_char	258
#define	c_int	259
#define	c_float	260
#define	c_bool	261
#define	c_string	262
#define	identifier	263
#define	cppblock	264
#define	k_while	265
#define	k_for	266
#define	k_if	267
#define	k_else	268
#define	k_enum	269
#define	k_switch	270
#define	k_case	271
#define	k_class	272
#define	k_do	273
#define	k_void	274
#define	k_const	275
#define	k_inline	276
#define	k_static	277
#define	k_virtual	278
#define	k_return	279
#define	k_autowait	280
#define	k_autocall	281
#define	k_waitevent	282
#define	k_event	283
#define	k_name	284
#define	k_thumbnail	285
#define	k_features	286
#define	k_uses	287
#define	k_export	288
#define	k_texture	289
#define	k_sound	290
#define	k_model	291
#define	k_properties	292
#define	k_components	293
#define	k_functions	294
#define	k_procedures	295
#define	k_wait	296
#define	k_on	297
#define	k_otherwise	298
#define	k_call	299
#define	k_jump	300
#define	k_stop	301
#define	k_resume	302
#define	k_pass	303
#define	k_CTString	304
#define	k_CTStringTrans	305
#define	k_CTFileName	306
#define	k_CTFileNameNoDep	307
#define	k_BOOL	308
#define	k_COLOR	309
#define	k_FLOAT	310
#define	k_INDEX	311
#define	k_RANGE	312
#define	k_CEntityPointer	313
#define	k_CModelObject	314
#define	k_CModelInstance	315
#define	k_CAnimObject	316
#define	k_CSoundObject	317
#define	k_CPlacement3D	318
#define	k_FLOATaabbox3D	319
#define	k_FLOATmatrix3D	320
#define	k_FLOATquat3D	321
#define	k_ANGLE	322
#define	k_FLOAT3D	323
#define	k_ANGLE3D	324
#define	k_FLOATplane3D	325
#define	k_ANIMATION	326
#define	k_ILLUMINATIONTYPE	327
#define	k_FLAGS	328

#line 1 "ecc/parser.y"

// rcg10042001 Changed to specify Ecc directory...
#include "Ecc/StdH.h"
#include "Ecc/Main.h"

// turn off over-helpful bit of bison... --ryan.
#ifdef __GNUC__
#define __attribute__(x)
#endif

#define YYINITDEPTH 1000

static const char *_strCurrentClass;
static int _iCurrentClassID;
static const char *_strCurrentBase;
static const char *_strCurrentDescription;
static const char *_strCurrentThumbnail;
static const char *_strCurrentEnum;
static int _bClassIsExported = 0;

static const char *_strCurrentPropertyID;
static const char *_strCurrentPropertyIdentifier; 
static const char *_strCurrentPropertyPropertyType;
static const char *_strCurrentPropertyEnumType;   
static const char *_strCurrentPropertyDataType;
static const char *_strCurrentPropertyName;       
static const char *_strCurrentPropertyShortcut;
static const char *_strCurrentPropertyColor;
static const char *_strCurrentPropertyFlags;
static const char *_strCurrentPropertyDefaultCode;

static const char *_strCurrentComponentIdentifier;
static const char *_strCurrentComponentType;
static const char *_strCurrentComponentID;     
static const char *_strCurrentComponentFileName;

static int _ctInProcedureHandler = 0;
static char _strLastProcedureName[256];

static char _strInWaitName[256];
static char _strAfterWaitName[256];
static char _strInWaitID[256];
static char _strAfterWaitID[256];

static char _strInLoopName[256];
static char _strAfterLoopName[256];
static char _strInLoopID[256];
static char _strAfterLoopID[256];
static char _strCurrentStateID[256];

static int _bInProcedure;   // set if currently compiling a procedure
static int _bInHandler;
static int _bHasOtherwise;  // set if current 'wait' block has an 'otherwise' statement

static const char *_strCurrentEvent;
static int _bFeature_AbstractBaseClass;
static int _bFeature_ImplementsOnInitClass;
static int _bFeature_ImplementsOnEndClass;
static int _bFeature_ImplementsOnPrecache;
static int _bFeature_ImplementsOnWorldInit;
static int _bFeature_ImplementsOnWorldEnd;
static int _bFeature_ImplementsOnWorldTick;
static int _bFeature_ImplementsOnWorldRender;
static int _bFeature_CanBePredictable;

static int _iNextFreeID;
inline int CreateID(void) {
  return _iNextFreeID++;
}

static int _ctBraces = 0;
void OpenBrace(void) {
  _ctBraces++;
}
void CloseBrace(void) {
  _ctBraces--;
}
SType Braces(int iBraces) {
  static char strBraces[50];
  memset(strBraces, '}', sizeof(strBraces));
  strBraces[iBraces] = 0;
  return SType(strBraces);
}
char *RemoveLineDirective(char *str) 
{
  if (str[0]=='\n' && str[1]=='#') {
    return strchr(str+2, '\n')+1;
  } else {
    return str;
  }
}
const char *GetLineDirective(SType &st)
{
  char *str = st.strString;
  if (str[0]=='\n' && str[1]=='#' && str[2]=='l') {
    char *strResult = strdup(str);
    strchr(strResult+3,'\n')[1] = 0;
    return strResult;
  } else {
    return "";
  }
}
void AddHandlerFunction(char *strProcedureName, int iStateID)
{
  fprintf(_fDeclaration, "  BOOL %s(const CEntityEvent &__eeInput);\n", strProcedureName);
  fprintf(_fTables, " {0x%08x, -1, CEntity::pEventHandler(&%s::%s), "
    "DEBUGSTRING(\"%s::%s\")},\n",
    iStateID, _strCurrentClass, strProcedureName, _strCurrentClass, strProcedureName);
}


void AddHandlerFunction(char *strProcedureName, char *strStateID, char *strBaseStateID)
{
  fprintf(_fDeclaration, "  BOOL %s(const CEntityEvent &__eeInput);\n", strProcedureName);
  fprintf(_fTables, " {%s, %s, CEntity::pEventHandler(&%s::%s),"
    "DEBUGSTRING(\"%s::%s\")},\n",
    strStateID, strBaseStateID, _strCurrentClass, strProcedureName,
    _strCurrentClass, RemoveLineDirective(strProcedureName));
  strcpy(_strLastProcedureName, RemoveLineDirective(strProcedureName));
  _ctInProcedureHandler = 0;
}

void CreateInternalHandlerFunction(char *strFunctionName, char *strID)
{
  int iID = CreateID();
  _ctInProcedureHandler++;
  sprintf(strID, "0x%08x", iID);
  sprintf(strFunctionName, "H0x%08x_%s_%02d", iID, _strLastProcedureName, _ctInProcedureHandler);
  AddHandlerFunction(strFunctionName, iID);
}

void DeclareFeatureProperties(void)
{
  if (_bFeature_CanBePredictable) {
    fprintf(_fTables, " CEntityProperty(CEntityProperty::EPT_ENTITYPTR, NULL, (0x%08x<<8)+%s, _offsetof(%s, %s), %s, %s, %s, %s),\n",
      _iCurrentClassID,
      "255",
      _strCurrentClass,
      "m_penPrediction",
      "\"\"",
      "0",
      "0",
      "0");
    fprintf(_fDeclaration, "  %s %s;\n",
      "CEntityPointer",
      "m_penPrediction"
      );
    fprintf(_fImplementation, "  m_penPrediction = NULL;\n");
  }
}

#define YYERROR_VERBOSE 1


#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		490
#define	YYFLAG		-32768
#define	YYNTBASE	98

#define YYTRANSLATE(x) ((unsigned)(x) <= 328 ? yytranslate[x] : 204)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    89,     2,     2,     2,    92,    85,     2,    79,
    80,    84,    88,    77,    82,    96,    91,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    78,    74,    86,
    81,    87,    97,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    94,     2,    95,    93,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    75,    90,    76,    83,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     2,     3,     4,     5,     6,    18,    19,    21,
    22,    25,    29,    30,    33,    36,    37,    46,    47,    49,
    51,    55,    59,    60,    69,    70,    72,    74,    78,    81,
    82,    84,    85,    86,    87,    88,    89,    90,    91,    92,
   127,   129,   132,   133,   134,   139,   141,   145,   147,   148,
   152,   153,   156,   160,   162,   165,   167,   171,   172,   179,
   181,   183,   186,   189,   191,   193,   195,   197,   199,   201,
   203,   205,   207,   209,   211,   213,   215,   217,   219,   221,
   223,   225,   227,   229,   231,   233,   235,   237,   238,   242,
   243,   245,   246,   251,   252,   257,   258,   261,   263,   265,
   267,   269,   271,   273,   278,   283,   286,   290,   292,   295,
   297,   301,   302,   307,   309,   311,   313,   315,   317,   319,
   321,   322,   325,   339,   340,   342,   343,   345,   346,   348,
   349,   351,   352,   354,   355,   357,   359,   361,   365,   368,
   370,   372,   374,   376,   379,   382,   385,   388,   391,   394,
   397,   400,   405,   406,   409,   410,   416,   417,   428,   429,
   431,   434,   436,   438,   440,   442,   444,   446,   448,   450,
   452,   454,   456,   458,   460,   462,   464,   466,   468,   470,
   472,   474,   476,   478,   480,   482,   484,   486,   489,   492,
   495,   498,   501,   504,   507,   510,   513,   516,   519,   522,
   525,   528,   531,   534,   537,   540,   543,   546,   549,   552,
   556,   560,   564,   567,   569,   571,   573,   575,   577,   579,
   581,   583,   585,   587,   589,   591,   593,   595,   597,   599,
   601,   603,   605,   607,   609,   611,   613,   615,   617,   619,
   621,   623,   625,   627,   629,   631,   632,   635,   638,   646,
   650,   654,   659,   661,   663,   665,   667,   669,   671,   673,
   675,   677,   679,   681,   683,   685,   687,   689,   691,   699,
   709,   710,   719,   720,   731,   732,   745,   746,   753,   757,
   763,   764,   766,   775,   778,   782,   789,   796,   798,   799,
   801,   806,   809,   812,   815,   819,   820,   822,   832,   842,
   843
};

static const short yyrhs[] = {    -1,
     0,     0,     0,     0,     0,     4,    99,   104,   100,   105,
   101,   107,   102,   104,   103,   118,     0,     0,     9,     0,
     0,   105,   106,     0,    32,     7,    74,     0,     0,   107,
   108,     0,   107,   113,     0,     0,    14,     8,   109,    75,
   111,   110,    76,    74,     0,     0,    77,     0,   112,     0,
   111,    77,   112,     0,     4,     8,     7,     0,     0,    28,
     8,   114,    75,   115,   110,    76,    74,     0,     0,   116,
     0,   117,     0,   115,    77,   117,     0,   167,     8,     0,
     0,   119,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   127,     8,    78,     8,    75,    29,     7,    74,    30,
     7,    74,   120,   128,   121,    37,    78,   135,   122,   132,
   123,    38,    78,   148,   124,    39,    78,   156,   125,    40,
    78,   168,   126,    76,    74,     0,    17,     0,    17,    33,
     0,     0,     0,    31,   129,   130,    74,     0,   131,     0,
   130,    77,   131,     0,     7,     0,     0,    75,   133,    76,
     0,     0,   133,   134,     0,   167,     8,    74,     0,   137,
     0,   136,   110,     0,   138,     0,   136,    77,   138,     0,
     0,   139,   141,   140,   142,   146,   145,     0,     4,     0,
     8,     0,    14,     8,     0,    73,     8,     0,    49,     0,
    50,     0,    51,     0,    52,     0,    53,     0,    54,     0,
    55,     0,    56,     0,    57,     0,    58,     0,    59,     0,
    60,     0,    61,     0,    62,     0,    63,     0,    64,     0,
    65,     0,    66,     0,    67,     0,    69,     0,    68,     0,
    70,     0,    72,     0,    71,     0,     0,     7,   143,   144,
     0,     0,     3,     0,     0,    54,    79,   173,    80,     0,
     0,    31,    79,   173,    80,     0,     0,    81,   147,     0,
     4,     0,     5,     0,     6,     0,     3,     0,     7,     0,
     8,     0,     8,    79,   173,    80,     0,   174,    79,   173,
    80,     0,    82,   147,     0,    79,   173,    80,     0,   150,
     0,   149,   110,     0,   151,     0,   149,    77,   151,     0,
     0,   152,   155,   153,   154,     0,     4,     0,     8,     0,
     7,     0,    36,     0,    34,     0,    35,     0,    17,     0,
     0,   156,   157,     0,   159,   161,   166,   158,     8,    79,
   163,    80,   160,    75,   176,    76,   162,     0,     0,    83,
     0,     0,    33,     0,     0,    20,     0,     0,    23,     0,
     0,    74,     0,     0,    19,     0,   164,     0,   165,     0,
   164,    77,   165,     0,   167,     8,     0,   167,     0,    19,
     0,   174,     0,     8,     0,    14,     8,     0,   167,    84,
     0,   167,    85,     0,    19,    84,     0,    20,   167,     0,
    21,   167,     0,    22,   167,     0,    17,   167,     0,     8,
    86,   167,    87,     0,     0,   168,   170,     0,     0,    78,
     8,    78,    78,     8,     0,     0,     8,    79,   172,    80,
   169,   171,    75,   176,    76,   162,     0,     0,     8,     0,
     8,     8,     0,     4,     0,     5,     0,     6,     0,     3,
     0,     7,     0,     8,     0,   174,     0,    81,     0,    88,
     0,    82,     0,    86,     0,    87,     0,    89,     0,    90,
     0,    85,     0,    84,     0,    91,     0,    92,     0,    93,
     0,    94,     0,    95,     0,    78,     0,    77,     0,    96,
     0,    97,     0,    83,     0,    79,    80,     0,    88,    88,
     0,    82,    82,     0,    82,    87,     0,    78,    78,     0,
    85,    85,     0,    90,    90,     0,    93,    93,     0,    87,
    87,     0,    86,    86,     0,    81,    81,     0,    89,    81,
     0,    87,    81,     0,    86,    81,     0,    85,    81,     0,
    90,    81,     0,    93,    81,     0,    88,    81,     0,    82,
    81,     0,    91,    81,     0,    92,    81,     0,    84,    81,
     0,    87,    87,    81,     0,    86,    86,    81,     0,    79,
   173,    80,     0,   173,   173,     0,    49,     0,    50,     0,
    51,     0,    52,     0,    53,     0,    54,     0,    55,     0,
    56,     0,    57,     0,    58,     0,    59,     0,    60,     0,
    61,     0,    62,     0,    63,     0,    64,     0,    65,     0,
    66,     0,    67,     0,    71,     0,    72,     0,    69,     0,
    68,     0,    70,     0,    20,     0,    22,     0,     4,     0,
     5,     0,     6,     0,     3,     0,     7,     0,     8,     0,
     0,   176,   177,     0,   173,    74,     0,    15,    79,   173,
    80,    75,   176,    76,     0,    16,   175,    78,     0,    75,
   176,    76,     0,   173,    75,   176,    76,     0,   180,     0,
   182,     0,   184,     0,   178,     0,   179,     0,   186,     0,
   188,     0,   189,     0,   194,     0,   191,     0,   197,     0,
   198,     0,   199,     0,   200,     0,   193,     0,    74,     0,
    12,    79,   173,    80,    75,   176,    76,     0,    12,    79,
   173,    80,    75,   176,    76,    13,   177,     0,     0,    10,
    79,   173,    80,   181,    75,   176,    76,     0,     0,    18,
    75,   176,    76,   183,    10,    79,   173,    80,    74,     0,
     0,    11,    79,   173,    74,   173,    74,   173,    80,   185,
    75,   176,    76,     0,     0,    41,   192,   187,    75,   203,
    76,     0,    25,   192,    74,     0,    27,   192,     8,   190,
    74,     0,     0,     8,     0,    26,   196,    79,   195,    80,
     8,   190,    74,     0,    79,    80,     0,    79,   173,    80,
     0,    45,   196,    79,   195,    80,    74,     0,    44,   196,
    79,   195,    80,    74,     0,   173,     0,     0,     8,     0,
     8,    78,    78,     8,     0,    46,    74,     0,    47,    74,
     0,    48,    74,     0,    24,   201,    74,     0,     0,   173,
     0,    42,    79,   172,    80,    78,    75,   176,    76,   162,
     0,    43,    79,   172,    80,    78,    75,   176,    76,   162,
     0,     0,   203,   202,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   253,   254,   264,   267,   272,   273,   274,   284,   285,   289,
   290,   293,   302,   303,   304,   310,   315,   321,   321,   323,
   324,   328,   338,   353,   361,   362,   366,   367,   371,   381,
   382,   386,   387,   401,   406,   410,   411,   417,   420,   421,
   486,   487,   491,   492,   502,   505,   506,   509,   552,   553,
   556,   557,   560,   570,   577,   586,   587,   590,   594,   617,
   618,   621,   626,   631,   636,   641,   646,   651,   656,   661,
   666,   671,   676,   681,   686,   691,   696,   701,   706,   711,
   716,   721,   726,   731,   736,   741,   746,   754,   759,   764,
   767,   772,   775,   779,   782,   787,   809,   818,   818,   818,
   818,   818,   819,   820,   821,   822,   823,   830,   836,   844,
   845,   848,   852,   865,   866,   867,   870,   871,   872,   873,
   880,   881,   885,   904,   905,   909,   910,   920,   921,   924,
   925,   928,   929,   932,   933,   934,   937,   938,   941,   945,
   946,   950,   951,   952,   953,   954,   955,   956,   957,   958,
   959,   960,   968,   969,   973,   974,   980,  1011,  1018,  1021,
  1024,  1030,  1030,  1030,  1030,  1030,  1031,  1032,  1033,  1033,
  1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,
  1033,  1033,  1033,  1033,  1033,  1033,  1033,  1034,  1035,  1036,
  1037,  1038,  1039,  1040,  1041,  1042,  1043,  1044,  1045,  1046,
  1047,  1048,  1049,  1050,  1051,  1052,  1053,  1054,  1055,  1056,
  1057,  1058,  1059,  1062,  1062,  1062,  1062,  1063,  1063,  1063,
  1063,  1063,  1064,  1064,  1064,  1064,  1064,  1065,  1065,  1065,
  1065,  1065,  1065,  1065,  1066,  1066,  1066,  1067,  1068,  1071,
  1071,  1071,  1071,  1071,  1072,  1079,  1080,  1083,  1084,  1085,
  1086,  1087,  1088,  1089,  1090,  1091,  1092,  1093,  1094,  1095,
  1096,  1097,  1098,  1099,  1100,  1101,  1102,  1103,  1108,  1124,
  1146,  1150,  1171,  1176,  1197,  1201,  1214,  1222,  1248,  1272,
  1297,  1300,  1305,  1329,  1332,  1338,  1347,  1359,  1362,  1368,
  1371,  1377,  1383,  1388,  1393,  1407,  1408,  1412,  1421,  1431,
  1432
};

static const char * const yytname[] = {   "$","error","$undefined.","c_char",
"c_int","c_float","c_bool","c_string","identifier","cppblock","k_while","k_for",
"k_if","k_else","k_enum","k_switch","k_case","k_class","k_do","k_void","k_const",
"k_inline","k_static","k_virtual","k_return","k_autowait","k_autocall","k_waitevent",
"k_event","k_name","k_thumbnail","k_features","k_uses","k_export","k_texture",
"k_sound","k_model","k_properties","k_components","k_functions","k_procedures",
"k_wait","k_on","k_otherwise","k_call","k_jump","k_stop","k_resume","k_pass",
"k_CTString","k_CTStringTrans","k_CTFileName","k_CTFileNameNoDep","k_BOOL","k_COLOR",
"k_FLOAT","k_INDEX","k_RANGE","k_CEntityPointer","k_CModelObject","k_CModelInstance",
"k_CAnimObject","k_CSoundObject","k_CPlacement3D","k_FLOATaabbox3D","k_FLOATmatrix3D",
"k_FLOATquat3D","k_ANGLE","k_FLOAT3D","k_ANGLE3D","k_FLOATplane3D","k_ANIMATION",
"k_ILLUMINATIONTYPE","k_FLAGS","';'","'{'","'}'","','","':'","'('","')'","'='",
"'-'","'~'","'*'","'&'","'<'","'>'","'+'","'!'","'|'","'/'","'%'","'^'","'['",
"']'","'.'","'?'","program","@1","@2","@3","@4","@5","opt_global_cppblock","uses_list",
"uses_statement","enum_and_event_declarations_list","enum_declaration","@6",
"opt_comma","enum_values_list","enum_value","event_declaration","@7","event_members_list",
"non_empty_event_members_list","event_member","opt_class_declaration","class_declaration",
"@8","@9","@10","@11","@12","@13","@14","class_optexport","opt_features","@15",
"features_list","feature","opt_internal_properties","internal_property_list",
"internal_property","property_declaration_list","nonempty_property_declaration_list",
"empty_property_declaration_list","property_declaration","property_id","property_identifier",
"property_type","property_wed_name_opt","property_shortcut_opt","property_color_opt",
"property_flags_opt","property_default_opt","property_default_expression","component_declaration_list",
"nonempty_component_declaration_list","empty_component_declaration_list","component_declaration",
"component_id","component_identifier","component_filename","component_type",
"function_list","function_implementation","opt_tilde","opt_export","opt_const",
"opt_virtual","opt_semicolon","parameters_list","non_void_parameters_list","parameter_declaration",
"return_type","any_type","procedure_list","opt_override","procedure_implementation",
"@16","event_specification","expression","type_keyword","case_constant_expression",
"statements","statement","statement_if","statement_if_else","statement_while",
"@17","statement_dowhile","@18","statement_for","@19","statement_wait","@20",
"statement_autowait","statement_waitevent","opt_eventvar","statement_autocall",
"wait_expression","statement_jump","statement_call","event_expression","jumptarget",
"statement_stop","statement_resume","statement_pass","statement_return","opt_expression",
"handler","handlers_list",""
};
#endif

static const short yyr1[] = {     0,
    98,    99,   100,   101,   102,   103,    98,   104,   104,   105,
   105,   106,   107,   107,   107,   109,   108,   110,   110,   111,
   111,   112,   114,   113,   115,   115,   116,   116,   117,   118,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   119,
   127,   127,   128,   129,   128,   130,   130,   131,   132,   132,
   133,   133,   134,   135,   135,   136,   136,   137,   138,   139,
   140,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   142,   142,   143,
   143,   144,   144,   145,   145,   146,   146,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   148,   148,   149,
   149,   150,   151,   152,   153,   154,   155,   155,   155,   155,
   156,   156,   157,   158,   158,   159,   159,   160,   160,   161,
   161,   162,   162,   163,   163,   163,   164,   164,   165,   166,
   166,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   168,   168,   169,   169,   171,   170,   172,   172,
   172,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   174,   174,   174,   174,   174,   174,   174,
   174,   174,   174,   174,   174,   174,   174,   174,   174,   174,
   174,   174,   174,   174,   174,   174,   174,   174,   174,   175,
   175,   175,   175,   175,   175,   176,   176,   177,   177,   177,
   177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
   177,   177,   177,   177,   177,   177,   177,   177,   178,   179,
   181,   180,   183,   182,   185,   184,   187,   186,   188,   189,
   190,   190,   191,   192,   192,   193,   194,   195,   195,   196,
   196,   197,   198,   199,   200,   201,   201,   202,   202,   203,
   203
};

static const short yyr2[] = {     0,
     0,     0,     0,     0,     0,     0,    11,     0,     1,     0,
     2,     3,     0,     2,     2,     0,     8,     0,     1,     1,
     3,     3,     0,     8,     0,     1,     1,     3,     2,     0,
     1,     0,     0,     0,     0,     0,     0,     0,     0,    34,
     1,     2,     0,     0,     4,     1,     3,     1,     0,     3,
     0,     2,     3,     1,     2,     1,     3,     0,     6,     1,
     1,     2,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     0,     3,     0,
     1,     0,     4,     0,     4,     0,     2,     1,     1,     1,
     1,     1,     1,     4,     4,     2,     3,     1,     2,     1,
     3,     0,     4,     1,     1,     1,     1,     1,     1,     1,
     0,     2,    13,     0,     1,     0,     1,     0,     1,     0,
     1,     0,     1,     0,     1,     1,     1,     3,     2,     1,
     1,     1,     1,     2,     2,     2,     2,     2,     2,     2,
     2,     4,     0,     2,     0,     5,     0,    10,     0,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     3,
     3,     3,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     0,     2,     2,     7,     3,
     3,     4,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     7,     9,
     0,     8,     0,    10,     0,    12,     0,     6,     3,     5,
     0,     1,     8,     2,     3,     6,     6,     1,     0,     1,
     4,     2,     2,     2,     3,     0,     1,     9,     9,     0,
     2
};

static const short yydefact[] = {     1,
     2,     8,     9,     3,    10,     4,     0,    13,    11,     0,
     5,    12,     0,     0,     8,    14,    15,    16,    23,     6,
     0,     0,    30,     0,    25,    41,     7,    31,     0,     0,
    18,    20,   143,     0,     0,     0,   238,     0,   239,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,   230,   231,   232,   236,   235,
   237,   233,   234,    18,    26,    27,     0,   142,    42,     0,
     0,    19,     0,     0,   144,   151,   147,   148,   149,   150,
    19,     0,    29,   145,   146,     0,    22,    21,     0,     0,
    28,     0,     0,    17,   152,    24,     0,     0,     0,     0,
     0,     0,    33,    43,    44,    34,     0,     0,    48,     0,
    46,     0,    45,     0,    58,    47,    60,    35,    18,    54,
    56,     0,    49,    19,    55,     0,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    84,    83,    85,    87,    86,
     0,     0,    51,    36,    57,    62,    63,    61,    88,     0,
     0,    90,    96,    50,    52,     0,     0,    91,    92,     0,
    94,     0,   112,     0,    89,   101,    98,    99,   100,   102,
   103,   238,   239,     0,     0,    97,     0,     0,    59,    53,
   114,    37,    18,   108,   110,     0,     0,     0,   165,   162,
   163,   164,   166,   167,   184,   183,     0,   169,   171,   187,
   177,   176,   172,   173,   170,   174,   175,   178,   179,   180,
   181,   182,   185,   186,     0,   168,   106,     0,     0,     0,
    19,   109,   120,   118,   119,   117,     0,     0,     0,   192,
   188,     0,   198,   206,   190,   191,   209,   202,   193,   201,
   197,   200,   196,   205,   189,   199,   203,   194,   207,   208,
   204,   195,   107,   213,     0,     0,     0,   111,   115,     0,
    93,   104,   212,   211,   210,   105,    95,   121,   116,   113,
   126,   127,     0,   122,   130,     0,   131,     0,   153,   141,
   124,   140,    39,   125,     0,     0,     0,   154,     0,   159,
     0,   134,   160,     0,    40,   135,     0,   136,   137,     0,
   161,   155,   128,     0,   139,     0,   157,   129,     0,   138,
     0,     0,   246,     0,   246,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   296,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   268,   246,   132,     0,   247,   256,
   257,   253,   254,   255,   258,   259,   260,   262,   267,   261,
   263,   264,   265,   266,   156,   132,     0,     0,     0,     0,
   243,   240,   241,   242,   244,   245,     0,   246,   297,     0,
     0,     0,   290,     0,     0,   277,     0,     0,   292,   293,
   294,     0,   133,   123,   248,   246,   158,     0,     0,     0,
     0,   250,     0,   295,   284,     0,   279,     0,   289,   281,
     0,   289,   289,   251,     0,   271,     0,     0,     0,   273,
   285,     0,   288,     0,   282,     0,   300,     0,     0,   252,
     0,     0,   246,   246,     0,   291,     0,   280,     0,     0,
     0,   246,     0,     0,     0,     0,   281,     0,     0,   278,
   301,   287,   286,     0,     0,   269,   249,     0,     0,   159,
   159,   272,   275,     0,     0,   283,     0,     0,     0,   270,
     0,     0,     0,   246,   274,     0,     0,     0,   246,   246,
   276,     0,     0,   132,   132,   298,   299,     0,     0,     0
};

static const short yydefgoto[] = {   488,
     2,     5,     8,    15,    23,     4,     6,     9,    11,    16,
    21,    73,    31,    32,    17,    22,    64,    65,    66,    27,
    28,   104,   108,   123,   161,   230,   283,   297,    29,   106,
   107,   110,   111,   154,   160,   165,   118,   119,   120,   121,
   122,   159,   152,   163,   169,   175,   189,   171,   186,   192,
   193,   194,   195,   196,   270,   280,   237,   281,   284,   295,
   285,   319,   288,   394,   307,   308,   309,   291,    67,   293,
   317,   298,   322,   304,   264,   226,   377,   326,   349,   350,
   351,   352,   431,   353,   435,   354,   469,   355,   411,   356,
   357,   426,   358,   382,   359,   360,   424,   384,   361,   362,
   363,   364,   380,   451,   439
};

static const short yypact[] = {    -3,
-32768,     0,-32768,-32768,-32768,   -13,    44,-32768,-32768,    -1,
    -2,-32768,   102,   111,     0,-32768,-32768,-32768,-32768,-32768,
    50,    51,   113,   127,  3207,    99,-32768,-32768,   125,   126,
    58,-32768,    52,   129,  3207,    55,  3207,  3207,  3207,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    63,-32768,-32768,    17,-32768,-32768,    67,
   134,   127,    70,  3207,-32768,    15,-32768,    15,    15,    15,
  3207,    71,-32768,-32768,-32768,   140,-32768,-32768,    75,    22,
-32768,    76,    79,-32768,-32768,-32768,   130,   148,    82,   131,
   153,    88,-32768,   132,-32768,-32768,   157,   128,-32768,   -35,
-32768,    89,-32768,   157,   162,-32768,-32768,-32768,    92,-32768,
-32768,  3320,    95,   162,-32768,   163,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   164,   165,-32768,-32768,-32768,-32768,-32768,-32768,   167,  3142,
   137,   173,    96,-32768,-32768,    19,   100,-32768,   133,    26,
   149,   105,   177,   103,-32768,-32768,-32768,-32768,-32768,-32768,
   109,-32768,-32768,  3052,    26,-32768,   110,   112,-32768,-32768,
-32768,-32768,   115,-32768,-32768,    18,  3052,  3052,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   116,  1532,   114,   -21,-32768,
   117,   -22,   -31,   -70,   -45,   118,   -43,   119,   120,   -53,
-32768,-32768,-32768,-32768,  1627,-32768,-32768,  3052,  3052,   151,
   177,-32768,-32768,-32768,-32768,-32768,   185,  1722,  1817,-32768,
-32768,  1912,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   121,-32768,   122,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  3052,  2007,  2102,   135,-32768,-32768,   189,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    25,-32768,   166,-32768,   181,   136,-32768,  3231,-32768,    55,
   124,    15,   197,-32768,   201,   138,   139,-32768,   141,   202,
   142,  3296,   203,   143,-32768,    55,   144,   145,-32768,    29,
-32768,   152,   192,  3207,-32768,   210,-32768,-32768,   146,-32768,
   154,   159,-32768,   158,-32768,   297,   218,   392,   156,   160,
   161,   168,    64,   169,  3052,   170,   219,   170,   170,   219,
   219,   171,   172,   174,-32768,-32768,   176,  1437,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   176,  3052,  3052,  3052,  3052,
-32768,-32768,-32768,-32768,-32768,-32768,   175,-32768,  3052,   178,
  2197,   180,   179,   183,   229,-32768,   184,   186,-32768,-32768,
-32768,   487,-32768,-32768,-32768,-32768,-32768,  2292,  2387,  2482,
  2577,-32768,   582,-32768,-32768,  2672,-32768,   188,  3052,   230,
   193,  3052,  3052,-32768,   677,-32768,  3052,   198,   200,-32768,
-32768,   233,  3052,   187,-32768,   182,-32768,   196,   199,-32768,
   207,  2767,-32768,-32768,   232,-32768,   235,-32768,   -27,   190,
   204,-32768,  3052,   772,   867,   205,   230,   208,   209,-32768,
-32768,-32768,-32768,   962,  2862,   238,-32768,  3052,   212,   202,
   202,-32768,-32768,  1342,  2957,-32768,   211,   213,   214,-32768,
   216,   194,   217,-32768,-32768,   221,   231,  1057,-32768,-32768,
-32768,  1152,  1247,   176,   176,-32768,-32768,   258,   277,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,   268,-32768,-32768,-32768,-32768,
-32768,   -57,-32768,   220,-32768,-32768,-32768,-32768,   237,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   206,-32768,-32768,-32768,-32768,-32768,-32768,   215,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   147,-32768,
-32768,-32768,    80,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -356,-32768,-32768,    -4,-32768,   -33,-32768,
-32768,-32768,-32768,  -345,  -184,   -17,-32768,  -322,  -150,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -131,-32768,  -221,-32768,-32768,  -291,  -217,-32768,-32768,
-32768,-32768,-32768,-32768,-32768
};


#define	YYLAST		3393


static const short yytable[] = {   225,
     1,    76,   328,    78,    79,    80,    82,    68,     3,   397,
   252,    13,   238,   239,   448,   449,   253,    68,     7,    68,
    68,    68,   242,   392,    83,    14,   172,   261,   176,   177,
   178,   179,   180,   181,   233,   254,   315,   257,   113,   262,
    90,   114,   255,   265,   266,   182,   258,   183,   450,   250,
    10,   234,   235,   236,   251,   403,    68,   282,   248,   244,
   245,   125,   249,    68,   -38,   246,   371,   372,   373,   374,
   375,   376,    12,   415,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    84,    85,
    84,    85,    84,    85,   184,    84,    85,   185,    95,    18,
   444,   445,    84,    85,   467,   468,   385,   386,    19,   454,
   428,   429,   387,   388,    24,    25,   166,   486,   487,    26,
    30,    69,    70,    71,    72,   232,    75,    74,    77,    81,
    87,   348,    68,   348,    86,    89,    92,    93,    94,    96,
   379,   478,   187,    97,    99,   100,   482,   483,    98,   102,
   101,   103,   105,   109,   112,   117,   115,   187,   124,   153,
   156,   157,   158,   162,   167,   168,   170,   173,   190,   188,
   191,   197,   398,   399,   400,   401,   174,   198,   228,   267,
   229,   231,   269,   240,   243,   279,   406,   247,   256,   259,
   260,   274,   275,   287,   296,   286,   294,   348,   299,   303,
   311,   318,   278,   289,   301,   305,   300,   321,   348,   302,
   323,   314,   312,   313,   423,   365,   383,   423,   423,   316,
   348,   324,   432,   325,   367,   327,   410,   425,   368,   369,
   436,   446,   447,   378,   389,   390,   370,   391,   381,   393,
   464,   404,   402,   407,   292,   438,   408,   489,   455,   348,
   348,   409,   412,   452,   413,   422,   437,   427,   310,   348,
    68,   476,   433,   465,   434,   440,   490,   453,   441,   348,
   310,   442,    20,   458,    68,   466,   460,   461,   474,   475,
   472,    88,   473,   348,   477,   479,    68,   348,   348,   199,
   200,   201,   202,   203,   204,   480,   329,   330,   331,   320,
   268,   332,   333,   470,   334,   459,   182,    91,   183,   116,
   335,   336,   337,   338,     0,     0,     0,     0,     0,     0,
     0,   227,     0,     0,     0,     0,     0,   339,   155,     0,
   340,   341,   342,   343,   344,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
   345,   346,   347,   205,   206,   207,     0,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,   329,   330,   331,     0,     0,   332,   333,     0,   334,
     0,   182,     0,   183,     0,   335,   336,   337,   338,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   339,     0,     0,   340,   341,   342,   343,   344,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,   345,   346,   366,   205,   206,
   207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,   329,   330,   331,     0,
     0,   332,   333,     0,   334,     0,   182,     0,   183,     0,
   335,   336,   337,   338,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   339,     0,     0,
   340,   341,   342,   343,   344,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
   345,   346,   414,   205,   206,   207,     0,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,   329,   330,   331,     0,     0,   332,   333,     0,   334,
     0,   182,     0,   183,     0,   335,   336,   337,   338,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   339,     0,     0,   340,   341,   342,   343,   344,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,   345,   346,   420,   205,   206,
   207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,   329,   330,   331,     0,
     0,   332,   333,     0,   334,     0,   182,     0,   183,     0,
   335,   336,   337,   338,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   339,     0,     0,
   340,   341,   342,   343,   344,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
   345,   346,   430,   205,   206,   207,     0,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,   329,   330,   331,     0,     0,   332,   333,     0,   334,
     0,   182,     0,   183,     0,   335,   336,   337,   338,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   339,     0,     0,   340,   341,   342,   343,   344,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,   345,   346,   456,   205,   206,
   207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,   329,   330,   331,     0,
     0,   332,   333,     0,   334,     0,   182,     0,   183,     0,
   335,   336,   337,   338,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   339,     0,     0,
   340,   341,   342,   343,   344,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
   345,   346,   457,   205,   206,   207,     0,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,   329,   330,   331,     0,     0,   332,   333,     0,   334,
     0,   182,     0,   183,     0,   335,   336,   337,   338,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   339,     0,     0,   340,   341,   342,   343,   344,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,   345,   346,   462,   205,   206,
   207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,   329,   330,   331,     0,
     0,   332,   333,     0,   334,     0,   182,     0,   183,     0,
   335,   336,   337,   338,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   339,     0,     0,
   340,   341,   342,   343,   344,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
   345,   346,   481,   205,   206,   207,     0,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,   329,   330,   331,     0,     0,   332,   333,     0,   334,
     0,   182,     0,   183,     0,   335,   336,   337,   338,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   339,     0,     0,   340,   341,   342,   343,   344,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,   345,   346,   484,   205,   206,
   207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,   329,   330,   331,     0,
     0,   332,   333,     0,   334,     0,   182,     0,   183,     0,
   335,   336,   337,   338,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   339,     0,     0,
   340,   341,   342,   343,   344,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
   345,   346,   485,   205,   206,   207,     0,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,   329,   330,   331,     0,     0,   332,   333,     0,   334,
     0,   182,     0,   183,     0,   335,   336,   337,   338,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   339,     0,     0,   340,   341,   342,   343,   344,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,   345,   346,     0,   205,   206,
   207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   183,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
   395,   396,     0,   205,   206,   207,     0,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,   183,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,     0,     0,     0,   205,   206,
   207,   241,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   183,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
     0,     0,     0,   205,   206,   207,   263,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,   183,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,     0,     0,     0,   205,   206,
   207,   271,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   183,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
     0,     0,     0,   205,   206,   207,   272,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,   183,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,     0,     0,     0,   205,   206,
   207,   273,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   183,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
     0,     0,     0,   205,   206,   207,   276,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,   183,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,     0,     0,     0,   205,   206,
   207,   277,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   183,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
     0,     0,     0,   205,   206,   207,   405,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,   183,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,     0,     0,     0,   205,   206,
   207,   416,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   183,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
   417,     0,     0,   205,   206,   207,     0,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,   183,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,     0,     0,     0,   205,   206,
   207,   418,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   183,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
     0,     0,     0,   205,   206,   207,   419,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,   183,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,     0,     0,     0,   205,   206,
   207,   421,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   183,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
   443,     0,     0,   205,   206,   207,     0,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,   183,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,     0,     0,     0,   205,   206,
   207,   463,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   199,
   200,   201,   202,   203,   204,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,     0,   183,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,     0,
     0,     0,     0,   205,   206,   207,   471,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   199,   200,   201,   202,   203,   204,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,     0,   183,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,     0,     0,     0,     0,   205,   206,
   207,     0,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,    33,
     0,     0,     0,     0,     0,    34,     0,     0,    35,     0,
    36,    37,    38,    39,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    33,     0,     0,   164,     0,     0,
    34,     0,     0,    35,     0,    36,    37,    38,    39,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    33,     0,
     0,     0,     0,     0,    34,     0,     0,    35,     0,   290,
    37,    38,    39,     0,     0,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    33,     0,     0,     0,     0,     0,    34,
     0,     0,    35,     0,   306,    37,    38,    39,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   126,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151
};

static const short yycheck[] = {   184,
     4,    35,   325,    37,    38,    39,    64,    25,     9,   366,
    81,    14,   197,   198,    42,    43,    87,    35,    32,    37,
    38,    39,   207,   346,     8,    28,     8,    81,     3,     4,
     5,     6,     7,     8,    17,    81,     8,    81,    74,    93,
    74,    77,    88,   228,   229,    20,    90,    22,    76,    81,
     7,    34,    35,    36,    86,   378,    74,    33,    81,    81,
    82,   119,    85,    81,    40,    87,     3,     4,     5,     6,
     7,     8,    74,   396,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    84,    85,
    84,    85,    84,    85,    79,    84,    85,    82,    87,     8,
   433,   434,    84,    85,   460,   461,   338,   339,     8,   442,
   412,   413,   340,   341,    75,    75,   160,   484,   485,    17,
     4,    33,     8,     8,    77,   193,     8,    86,    84,    77,
     7,   326,   160,   328,    78,    76,    76,     8,    74,    74,
   335,   474,   170,    75,     7,    74,   479,   480,    29,     7,
    30,    74,    31,     7,    37,     4,    78,   185,    77,    75,
     8,     8,     8,     7,    38,     3,    81,    78,    74,    31,
     4,    79,   367,   368,   369,   370,    54,    79,    79,    39,
    79,    77,     8,    78,    81,     7,   381,    81,    81,    81,
    81,    81,    81,    23,     8,    40,    83,   392,     8,     8,
     8,    20,    78,    78,    76,    74,    79,     8,   403,    79,
    75,    77,    80,    80,   409,     8,     8,   412,   413,    78,
   415,    78,   417,    75,    79,    78,     8,     8,    79,    79,
     8,    10,     8,    75,    74,    74,    79,    74,    79,    74,
    13,    74,    78,    74,   288,    74,    78,     0,   443,   444,
   445,    79,    79,    74,    79,    78,    80,    75,   302,   454,
   288,    78,    75,   458,    75,    80,     0,    74,    80,   464,
   314,    75,    15,    79,   302,    74,    79,    79,    75,    74,
    80,    72,    80,   478,    78,    75,   314,   482,   483,     3,
     4,     5,     6,     7,     8,    75,    10,    11,    12,   314,
   231,    15,    16,   464,    18,   447,    20,    81,    22,   114,
    24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   185,    -1,    -1,    -1,    -1,    -1,    41,   124,    -1,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    10,    11,    12,    -1,    -1,    15,    16,    -1,    18,
    -1,    20,    -1,    22,    -1,    24,    25,    26,    27,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    41,    -1,    -1,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
    79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    10,    11,    12,    -1,
    -1,    15,    16,    -1,    18,    -1,    20,    -1,    22,    -1,
    24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    10,    11,    12,    -1,    -1,    15,    16,    -1,    18,
    -1,    20,    -1,    22,    -1,    24,    25,    26,    27,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    41,    -1,    -1,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
    79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    10,    11,    12,    -1,
    -1,    15,    16,    -1,    18,    -1,    20,    -1,    22,    -1,
    24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    10,    11,    12,    -1,    -1,    15,    16,    -1,    18,
    -1,    20,    -1,    22,    -1,    24,    25,    26,    27,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    41,    -1,    -1,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
    79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    10,    11,    12,    -1,
    -1,    15,    16,    -1,    18,    -1,    20,    -1,    22,    -1,
    24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    10,    11,    12,    -1,    -1,    15,    16,    -1,    18,
    -1,    20,    -1,    22,    -1,    24,    25,    26,    27,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    41,    -1,    -1,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
    79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    10,    11,    12,    -1,
    -1,    15,    16,    -1,    18,    -1,    20,    -1,    22,    -1,
    24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    10,    11,    12,    -1,    -1,    15,    16,    -1,    18,
    -1,    20,    -1,    22,    -1,    24,    25,    26,    27,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    41,    -1,    -1,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
    79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    10,    11,    12,    -1,
    -1,    15,    16,    -1,    18,    -1,    20,    -1,    22,    -1,
    24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    10,    11,    12,    -1,    -1,    15,    16,    -1,    18,
    -1,    20,    -1,    22,    -1,    24,    25,    26,    27,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    41,    -1,    -1,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    74,    75,    -1,    77,    78,
    79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    75,    -1,    77,    78,    79,    -1,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    20,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    20,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    20,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    20,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    20,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    -1,    -1,    77,    78,    79,    -1,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    20,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    20,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    -1,    -1,    77,    78,    79,    -1,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    20,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     3,
     4,     5,     6,     7,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,     3,     4,     5,     6,     7,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    20,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    -1,    -1,    -1,    77,    78,
    79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     8,
    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,    17,    -1,
    19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,     8,    -1,    -1,    76,    -1,    -1,
    14,    -1,    -1,    17,    -1,    19,    20,    21,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
    -1,    -1,    -1,    -1,    14,    -1,    -1,    17,    -1,    19,
    20,    21,    22,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,     8,    -1,    -1,    -1,    -1,    -1,    14,
    -1,    -1,    17,    -1,    19,    20,    21,    22,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#undef YYERROR_VERBOSE
#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 253 "ecc/parser.y"
{;
    break;}
case 2:
#line 254 "ecc/parser.y"
{
    int iID = atoi(yyvsp[0].strString);
    if(iID>32767) {
      yyerror("Maximum allowed id for entity source file is 32767");
    }
    _iCurrentClassID = iID;
    _iNextFreeID = iID<<16;
    fprintf(_fDeclaration, "#ifndef _%s_INCLUDED\n", _strFileNameBaseIdentifier);
    fprintf(_fDeclaration, "#define _%s_INCLUDED 1\n", _strFileNameBaseIdentifier);

  ;
    break;}
case 3:
#line 264 "ecc/parser.y"
{

    //fprintf(_fImplementation, "\n#undef DECL_DLL\n#define DECL_DLL _declspec(dllimport)\n");
  ;
    break;}
case 4:
#line 267 "ecc/parser.y"
{
    //fprintf(_fImplementation, "\n#undef DECL_DLL\n#define DECL_DLL _declspec(dllexport)\n");

    fprintf(_fImplementation, "#include <%s.h>\n", _strFileNameBase);
    fprintf(_fImplementation, "#include <%s_tables.h>\n", _strFileNameBase);
  ;
    break;}
case 5:
#line 272 "ecc/parser.y"
{
  ;
    break;}
case 6:
#line 273 "ecc/parser.y"
{
  ;
    break;}
case 7:
#line 274 "ecc/parser.y"
{
    fprintf(_fDeclaration, "#endif // _%s_INCLUDED\n", _strFileNameBaseIdentifier);
  ;
    break;}
case 9:
#line 285 "ecc/parser.y"
{ fprintf(_fImplementation, "%s\n", yyvsp[0].strString); ;
    break;}
case 12:
#line 293 "ecc/parser.y"
{
    char *strUsedFileName = strdup(yyvsp[-1].strString);
    strUsedFileName[strlen(strUsedFileName)-1] = 0;
    fprintf(_fDeclaration, "#include <%s.h>\n", strUsedFileName+1);
  ;
    break;}
case 16:
#line 310 "ecc/parser.y"
{ 
    _strCurrentEnum = yyvsp[0].strString;
    fprintf(_fTables, "EP_ENUMBEG(%s)\n", _strCurrentEnum );
    fprintf(_fDeclaration, "extern DECL_DLL CEntityPropertyEnumType %s_enum;\n", _strCurrentEnum );
    fprintf(_fDeclaration, "enum %s {\n", _strCurrentEnum );
  ;
    break;}
case 17:
#line 315 "ecc/parser.y"
{
    fprintf(_fTables, "EP_ENUMEND(%s);\n\n", _strCurrentEnum);
    fprintf(_fDeclaration, "};\n");
    fprintf(_fDeclaration, "DECL_DLL inline void ClearToDefault(%s &e) { e = (%s)0; } ;\n", _strCurrentEnum, _strCurrentEnum);
  ;
    break;}
case 22:
#line 328 "ecc/parser.y"
{
    fprintf(_fTables, "  EP_ENUMVALUE(%s, %s),\n", yyvsp[-1].strString, yyvsp[0].strString);
    fprintf(_fDeclaration, "  %s = %s,\n", yyvsp[-1].strString, yyvsp[-2].strString);
  ;
    break;}
case 23:
#line 338 "ecc/parser.y"
{ 
    _strCurrentEvent = yyvsp[0].strString;
    int iID = CreateID();
    fprintf(_fDeclaration, "#define EVENTCODE_%s 0x%08x\n", _strCurrentEvent, iID);
    fprintf(_fDeclaration, "class DECL_DLL %s : public CEntityEvent {\npublic:\n",
      _strCurrentEvent);
    fprintf(_fDeclaration, "%s();\n", _strCurrentEvent );
    fprintf(_fDeclaration, "CEntityEvent *MakeCopy(void);\n");
    fprintf(_fImplementation, 
      "CEntityEvent *%s::MakeCopy(void) { "
      "CEntityEvent *peeCopy = new %s(*this); "
      "return peeCopy;}\n",
      _strCurrentEvent, _strCurrentEvent);
    fprintf(_fImplementation, "%s::%s() : CEntityEvent(EVENTCODE_%s) {;\n",
      _strCurrentEvent, _strCurrentEvent, _strCurrentEvent);
  ;
    break;}
case 24:
#line 353 "ecc/parser.y"
{
    fprintf(_fImplementation, "};\n");
    fprintf(_fDeclaration, "};\n");
    fprintf(_fDeclaration, "DECL_DLL inline void ClearToDefault(%s &e) { e = %s(); } ;\n", _strCurrentEvent, _strCurrentEvent);
  ;
    break;}
case 29:
#line 371 "ecc/parser.y"
{
    fprintf(_fDeclaration, "%s %s;\n", yyvsp[-1].strString, yyvsp[0].strString);
    fprintf(_fImplementation, " ClearToDefault(%s);\n", yyvsp[0].strString);
  ;
    break;}
case 33:
#line 389 "ecc/parser.y"
{
    _strCurrentClass = yyvsp[-9].strString;
    _strCurrentBase = yyvsp[-7].strString;
    _strCurrentDescription = yyvsp[-4].strString;
    _strCurrentThumbnail = yyvsp[-1].strString;

    fprintf(_fTables, "#define ENTITYCLASS %s\n\n", _strCurrentClass);
    fprintf(_fDeclaration, "extern \"C\" DECL_DLL CDLLEntityClass %s_DLLClass;\n",
      _strCurrentClass);
    fprintf(_fDeclaration, "%s %s : public %s {\npublic:\n",
      yyvsp[-10].strString, _strCurrentClass, _strCurrentBase);

  ;
    break;}
case 34:
#line 401 "ecc/parser.y"
{
    fprintf(_fDeclaration, "  %s virtual void SetDefaultProperties(void);\n", _bClassIsExported?"":"DECL_DLL");
    fprintf(_fImplementation, "void %s::SetDefaultProperties(void) {\n", _strCurrentClass);
    fprintf(_fTables, "CEntityProperty %s_properties[] = {\n", _strCurrentClass);

  ;
    break;}
case 35:
#line 406 "ecc/parser.y"
{
    fprintf(_fImplementation, "  %s::SetDefaultProperties();\n}\n", _strCurrentBase);

    fprintf(_fTables, "CEntityComponent %s_components[] = {\n", _strCurrentClass);
  ;
    break;}
case 36:
#line 410 "ecc/parser.y"
{
  ;
    break;}
case 37:
#line 411 "ecc/parser.y"
{
    _bTrackLineInformation = 1;
    fprintf(_fTables, "CEventHandlerEntry %s_handlers[] = {\n", _strCurrentClass);

    _bInProcedure = 0;
    _bInHandler = 0;
  ;
    break;}
case 38:
#line 417 "ecc/parser.y"
{

    _bInProcedure = 1;
  ;
    break;}
case 39:
#line 420 "ecc/parser.y"
{
  ;
    break;}
case 40:
#line 421 "ecc/parser.y"
{
    fprintf(_fTables, "};\n#define %s_handlersct ARRAYCOUNT(%s_handlers)\n", 
      _strCurrentClass, _strCurrentClass);
    fprintf(_fTables, "\n");

    if (_bFeature_AbstractBaseClass) {
      fprintf(_fTables, "CEntity *%s_New(void) { return NULL; };\n",
        _strCurrentClass);
    } else {
      fprintf(_fTables, "CEntity *%s_New(void) { return new %s; };\n",
        _strCurrentClass, _strCurrentClass);
    }

    if (!_bFeature_ImplementsOnInitClass) {
      fprintf(_fTables, "void %s_OnInitClass(void) {};\n", _strCurrentClass);
    } else {
      fprintf(_fTables, "void %s_OnInitClass(void);\n", _strCurrentClass);
    }

    if (!_bFeature_ImplementsOnEndClass) {
      fprintf(_fTables, "void %s_OnEndClass(void) {};\n", _strCurrentClass);
    } else {
      fprintf(_fTables, "void %s_OnEndClass(void);\n", _strCurrentClass);
    }

    if (!_bFeature_ImplementsOnPrecache) {
      fprintf(_fTables, "void %s_OnPrecache(CDLLEntityClass *pdec, INDEX iUser) {};\n", _strCurrentClass);
    } else {
      fprintf(_fTables, "void %s_OnPrecache(CDLLEntityClass *pdec, INDEX iUser);\n", _strCurrentClass);
    }

    if (!_bFeature_ImplementsOnWorldEnd) {
      fprintf(_fTables, "void %s_OnWorldEnd(CWorld *pwo) {};\n", _strCurrentClass);
    } else {
      fprintf(_fTables, "void %s_OnWorldEnd(CWorld *pwo);\n", _strCurrentClass);
    }

    if (!_bFeature_ImplementsOnWorldInit) {
      fprintf(_fTables, "void %s_OnWorldInit(CWorld *pwo) {};\n", _strCurrentClass);
    } else {
      fprintf(_fTables, "void %s_OnWorldInit(CWorld *pwo);\n", _strCurrentClass);
    }

    if (!_bFeature_ImplementsOnWorldTick) {
      fprintf(_fTables, "void %s_OnWorldTick(CWorld *pwo) {};\n", _strCurrentClass);
    } else {
      fprintf(_fTables, "void %s_OnWorldTick(CWorld *pwo);\n", _strCurrentClass);
    }

    if (!_bFeature_ImplementsOnWorldRender) {
      fprintf(_fTables, "void %s_OnWorldRender(CWorld *pwo) {};\n", _strCurrentClass);
    } else {
      fprintf(_fTables, "void %s_OnWorldRender(CWorld *pwo);\n", _strCurrentClass);
    }

    fprintf(_fTables, "ENTITY_CLASSDEFINITION(%s, %s, %s, %s, 0x%08x);\n",
      _strCurrentClass, _strCurrentBase, 
      _strCurrentDescription, _strCurrentThumbnail, _iCurrentClassID);
    fprintf(_fTables, "DECLARE_CTFILENAME(_fnm%s_tbn, %s);\n", _strCurrentClass, _strCurrentThumbnail);

    fprintf(_fDeclaration, "};\n");
  ;
    break;}
case 41:
#line 486 "ecc/parser.y"
{ yyval = yyvsp[0]; _bClassIsExported = 0; ;
    break;}
case 42:
#line 487 "ecc/parser.y"
{ yyval = yyvsp[-1]+" DECL_DLL "; _bClassIsExported = 1; ;
    break;}
case 44:
#line 492 "ecc/parser.y"
{
    _bFeature_ImplementsOnWorldInit = 0;
    _bFeature_ImplementsOnWorldEnd = 0;
    _bFeature_ImplementsOnWorldTick = 0;
    _bFeature_ImplementsOnWorldRender = 0;
    _bFeature_ImplementsOnInitClass = 0;
    _bFeature_ImplementsOnEndClass = 0;
    _bFeature_ImplementsOnPrecache = 0;
    _bFeature_AbstractBaseClass = 0;
    _bFeature_CanBePredictable = 0;
  ;
    break;}
case 48:
#line 509 "ecc/parser.y"
{
    if (strcmp(yyvsp[0].strString, "\"AbstractBaseClass\"")==0) {
      _bFeature_AbstractBaseClass = 1;
    } else if (strcmp(yyvsp[0].strString, "\"IsTargetable\"")==0) {
      fprintf(_fDeclaration, "virtual BOOL IsTargetable(void) const { return TRUE; };\n");
    } else if (strcmp(yyvsp[0].strString, "\"IsImportant\"")==0) {
      fprintf(_fDeclaration, "virtual BOOL IsImportant(void) const { return TRUE; };\n");
    } else if (strcmp(yyvsp[0].strString, "\"HasName\"")==0) {
      fprintf(_fDeclaration, 
        "virtual const CTString &GetName(void) const { return m_strName; };\n");
    } else if (strcmp(yyvsp[0].strString, "\"CanBePredictable\"")==0) {
      fprintf(_fDeclaration, 
        "virtual CEntity *GetPredictionPair(void) { return m_penPrediction; };\n");
      fprintf(_fDeclaration, 
        "virtual void SetPredictionPair(CEntity *penPair) { m_penPrediction = penPair; };\n");
      _bFeature_CanBePredictable = 1;
    } else if (strcmp(yyvsp[0].strString, "\"HasDescription\"")==0) {
      fprintf(_fDeclaration, 
        "virtual const CTString &GetDescription(void) const { return m_strDescription; };\n");
    } else if (strcmp(yyvsp[0].strString, "\"HasTarget\"")==0) {
      fprintf(_fDeclaration, 
        "virtual CEntity *GetTarget(void) const { return m_penTarget; };\n");
    } else if (strcmp(yyvsp[0].strString, "\"ImplementsOnInitClass\"")==0) {
      _bFeature_ImplementsOnInitClass = 1;
    } else if (strcmp(yyvsp[0].strString, "\"ImplementsOnEndClass\"")==0) {
      _bFeature_ImplementsOnEndClass = 1;
    } else if (strcmp(yyvsp[0].strString, "\"ImplementsOnPrecache\"")==0) {
      _bFeature_ImplementsOnPrecache = 1;
    } else if (strcmp(yyvsp[0].strString, "\"ImplementsOnWorldInit\"")==0) {
      _bFeature_ImplementsOnWorldInit = 1;
    } else if (strcmp(yyvsp[0].strString, "\"ImplementsOnWorldEnd\"")==0) {
      _bFeature_ImplementsOnWorldEnd = 1;
    } else if (strcmp(yyvsp[0].strString, "\"ImplementsOnWorldTick\"")==0) {
      _bFeature_ImplementsOnWorldTick = 1;
    } else if (strcmp(yyvsp[0].strString, "\"ImplementsOnWorldRender\"")==0) {
      _bFeature_ImplementsOnWorldRender = 1;
    } else {
      yyerror((SType("Unknown feature: ")+yyvsp[0]).strString);
    }
  ;
    break;}
case 53:
#line 560 "ecc/parser.y"
{ 
    fprintf(_fDeclaration, "%s %s;\n", yyvsp[-2].strString, yyvsp[-1].strString);
  ;
    break;}
case 54:
#line 570 "ecc/parser.y"
{
    DeclareFeatureProperties(); // this won't work, but at least it will generate an error!!!!
    fprintf(_fTables, "  CEntityProperty()\n};\n");
    fprintf(_fTables, "#define %s_propertiesct 0\n", _strCurrentClass);
    fprintf(_fTables, "\n");
    fprintf(_fTables, "\n");
  ;
    break;}
case 55:
#line 577 "ecc/parser.y"
{
    DeclareFeatureProperties();
    fprintf(_fTables, "};\n");
    fprintf(_fTables, "#define %s_propertiesct ARRAYCOUNT(%s_properties)\n", 
      _strCurrentClass, _strCurrentClass);
    fprintf(_fTables, "\n");
  ;
    break;}
case 59:
#line 594 "ecc/parser.y"
{
    fprintf(_fTables, " CEntityProperty(%s, %s, (0x%08x<<8)+%s, _offsetof(%s, %s), %s, %s, %s, %s),\n",
      _strCurrentPropertyPropertyType,
      _strCurrentPropertyEnumType,
      _iCurrentClassID,
      _strCurrentPropertyID,
      _strCurrentClass,
      _strCurrentPropertyIdentifier,
      _strCurrentPropertyName,
      _strCurrentPropertyShortcut,
      _strCurrentPropertyColor,
      _strCurrentPropertyFlags);
    fprintf(_fDeclaration, "  %s %s;\n",
      _strCurrentPropertyDataType,
      _strCurrentPropertyIdentifier
      );

    if (strlen(_strCurrentPropertyDefaultCode)>0) {
      fprintf(_fImplementation, "  %s\n", _strCurrentPropertyDefaultCode);
    }
  ;
    break;}
case 60:
#line 617 "ecc/parser.y"
{ _strCurrentPropertyID = yyvsp[0].strString; ;
    break;}
case 61:
#line 618 "ecc/parser.y"
{ _strCurrentPropertyIdentifier = yyvsp[0].strString; ;
    break;}
case 62:
#line 621 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_ENUM"; 
    _strCurrentPropertyEnumType = (SType("&")+yyvsp[0]+"_enum").strString; 
    _strCurrentPropertyDataType = (SType("enum ")+yyvsp[0].strString).strString;
  ;
    break;}
case 63:
#line 626 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_FLAGS"; 
    _strCurrentPropertyEnumType = (SType("&")+yyvsp[0]+"_enum").strString; 
    _strCurrentPropertyDataType = "ULONG";
  ;
    break;}
case 64:
#line 631 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_STRING"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "CTString";
  ;
    break;}
case 65:
#line 636 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_STRINGTRANS"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "CTStringTrans";
  ;
    break;}
case 66:
#line 641 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_FILENAME"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "CTFileName";
  ;
    break;}
case 67:
#line 646 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_FILENAMENODEP"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "CTFileNameNoDep";
  ;
    break;}
case 68:
#line 651 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_BOOL"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "BOOL";
  ;
    break;}
case 69:
#line 656 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_COLOR"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "COLOR";
  ;
    break;}
case 70:
#line 661 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_FLOAT"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "FLOAT";
  ;
    break;}
case 71:
#line 666 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_INDEX"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "INDEX";
  ;
    break;}
case 72:
#line 671 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_RANGE"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "RANGE";
  ;
    break;}
case 73:
#line 676 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_ENTITYPTR"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "CEntityPointer";
  ;
    break;}
case 74:
#line 681 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_MODELOBJECT"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "CModelObject";
  ;
    break;}
case 75:
#line 686 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_MODELINSTANCE"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "CModelInstance";
  ;
    break;}
case 76:
#line 691 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_ANIMOBJECT"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "CAnimObject";
  ;
    break;}
case 77:
#line 696 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_SOUNDOBJECT"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "CSoundObject";
  ;
    break;}
case 78:
#line 701 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_PLACEMENT3D"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "CPlacement3D";
  ;
    break;}
case 79:
#line 706 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_FLOATAABBOX3D"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "FLOATaabbox3D";
  ;
    break;}
case 80:
#line 711 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_FLOATMATRIX3D"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "FLOATmatrix3D";
  ;
    break;}
case 81:
#line 716 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_FLOATQUAT3D"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "FLOATquat3D";
  ;
    break;}
case 82:
#line 721 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_ANGLE"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "ANGLE";
  ;
    break;}
case 83:
#line 726 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_ANGLE3D"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "ANGLE3D";
  ;
    break;}
case 84:
#line 731 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_FLOAT3D"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "FLOAT3D";
  ;
    break;}
case 85:
#line 736 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_FLOATplane3D"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "FLOATplane3D";
  ;
    break;}
case 86:
#line 741 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_ILLUMINATIONTYPE"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "ILLUMINATIONTYPE";
  ;
    break;}
case 87:
#line 746 "ecc/parser.y"
{
    _strCurrentPropertyPropertyType = "CEntityProperty::EPT_ANIMATION"; 
    _strCurrentPropertyEnumType = "NULL"; 
    _strCurrentPropertyDataType = "ANIMATION";
  ;
    break;}
case 88:
#line 754 "ecc/parser.y"
{
    _strCurrentPropertyName = "\"\""; 
    _strCurrentPropertyShortcut = "0"; 
    _strCurrentPropertyColor = "0"; // this won't be rendered anyway
  ;
    break;}
case 89:
#line 759 "ecc/parser.y"
{
    _strCurrentPropertyName = yyvsp[-2].strString; 
  ;
    break;}
case 90:
#line 764 "ecc/parser.y"
{
    _strCurrentPropertyShortcut = "0"; 
  ;
    break;}
case 91:
#line 767 "ecc/parser.y"
{
    _strCurrentPropertyShortcut = yyvsp[0].strString; 
  ;
    break;}
case 92:
#line 772 "ecc/parser.y"
{
    _strCurrentPropertyColor = "0x7F0000FFUL"; // dark red
  ;
    break;}
case 93:
#line 775 "ecc/parser.y"
{
    _strCurrentPropertyColor = yyvsp[-1].strString; 
  ;
    break;}
case 94:
#line 779 "ecc/parser.y"
{
    _strCurrentPropertyFlags = "0"; // dark red
  ;
    break;}
case 95:
#line 782 "ecc/parser.y"
{
    _strCurrentPropertyFlags = yyvsp[-1].strString; 
  ;
    break;}
case 96:
#line 787 "ecc/parser.y"
{
    if (strcmp(_strCurrentPropertyDataType,"CEntityPointer")==0)  {
      _strCurrentPropertyDefaultCode = (SType(_strCurrentPropertyIdentifier)+" = NULL;").strString;
    } else if (strcmp(_strCurrentPropertyDataType,"CModelObject")==0)  {
      _strCurrentPropertyDefaultCode = 
        (SType(_strCurrentPropertyIdentifier)+".SetData(NULL);\n"+
        _strCurrentPropertyIdentifier+".mo_toTexture.SetData(NULL);").strString;
    } else if (strcmp(_strCurrentPropertyDataType,"CModelInstance")==0)  {
      _strCurrentPropertyDefaultCode = 
        (SType(_strCurrentPropertyIdentifier)+".Clear();\n").strString;
    } else if (strcmp(_strCurrentPropertyDataType,"CAnimObject")==0)  {
      _strCurrentPropertyDefaultCode = 
        (SType(_strCurrentPropertyIdentifier)+".SetData(NULL);\n").strString;
    } else if (strcmp(_strCurrentPropertyDataType,"CSoundObject")==0)  {
      _strCurrentPropertyDefaultCode = 
        (SType(_strCurrentPropertyIdentifier)+".SetOwner(this);\n"+
         _strCurrentPropertyIdentifier+".Stop_internal();").strString;
    } else {
      yyerror("this kind of property must have default value");
      _strCurrentPropertyDefaultCode = "";
    }
  ;
    break;}
case 97:
#line 809 "ecc/parser.y"
{
    if (strcmp(_strCurrentPropertyDataType,"CEntityPointer")==0)  {
      yyerror("CEntityPointer type properties always default to NULL");
    } else {
      _strCurrentPropertyDefaultCode = (SType(_strCurrentPropertyIdentifier)+" = "+yyvsp[0].strString+";").strString;
    }
  ;
    break;}
case 103:
#line 819 "ecc/parser.y"
{yyval = yyvsp[0] + " ";;
    break;}
case 104:
#line 820 "ecc/parser.y"
{yyval = yyvsp[-3]+yyvsp[-2]+yyvsp[-1]+yyvsp[0];;
    break;}
case 105:
#line 821 "ecc/parser.y"
{yyval = yyvsp[-3]+yyvsp[-2]+yyvsp[-1]+yyvsp[0];;
    break;}
case 106:
#line 822 "ecc/parser.y"
{yyval = yyvsp[-1]+yyvsp[0];;
    break;}
case 107:
#line 823 "ecc/parser.y"
{yyval = yyvsp[-2]+yyvsp[-1]+yyvsp[0];;
    break;}
case 108:
#line 830 "ecc/parser.y"
{
    fprintf(_fTables, "  CEntityComponent()\n};\n");
    fprintf(_fTables, "#define %s_componentsct 0\n", _strCurrentClass);
    fprintf(_fTables, "\n");
    fprintf(_fTables, "\n");
  ;
    break;}
case 109:
#line 836 "ecc/parser.y"
{
    fprintf(_fTables, "};\n");
    fprintf(_fTables, "#define %s_componentsct ARRAYCOUNT(%s_components)\n", 
      _strCurrentClass, _strCurrentClass);
    fprintf(_fTables, "\n");
  ;
    break;}
case 113:
#line 852 "ecc/parser.y"
{
  fprintf(_fTables, "#define %s ((0x%08x<<8)+%s)\n",
      _strCurrentComponentIdentifier,
      _iCurrentClassID,
      _strCurrentComponentID);
    fprintf(_fTables, " CEntityComponent(%s, %s, \"%s%s\" %s),\n",
      _strCurrentComponentType,
      _strCurrentComponentIdentifier,
      "EF","NM",
      _strCurrentComponentFileName);
  ;
    break;}
case 114:
#line 865 "ecc/parser.y"
{ _strCurrentComponentID = yyvsp[0].strString; ;
    break;}
case 115:
#line 866 "ecc/parser.y"
{ _strCurrentComponentIdentifier = yyvsp[0].strString; ;
    break;}
case 116:
#line 867 "ecc/parser.y"
{ _strCurrentComponentFileName = yyvsp[0].strString; ;
    break;}
case 117:
#line 870 "ecc/parser.y"
{ _strCurrentComponentType = "ECT_MODEL"; ;
    break;}
case 118:
#line 871 "ecc/parser.y"
{ _strCurrentComponentType = "ECT_TEXTURE"; ;
    break;}
case 119:
#line 872 "ecc/parser.y"
{ _strCurrentComponentType = "ECT_SOUND"; ;
    break;}
case 120:
#line 873 "ecc/parser.y"
{ _strCurrentComponentType = "ECT_CLASS"; ;
    break;}
case 121:
#line 880 "ecc/parser.y"
{ yyval = "";;
    break;}
case 122:
#line 881 "ecc/parser.y"
{yyval = yyvsp[-1]+yyvsp[0];;
    break;}
case 123:
#line 886 "ecc/parser.y"
{
    const char *strReturnType = yyvsp[-10].strString;
    const char *strFunctionHeader = (yyvsp[-9]+yyvsp[-8]+yyvsp[-7]+yyvsp[-6]+yyvsp[-5]+yyvsp[-4]).strString;
    const char *strFunctionBody = (yyvsp[-3]+yyvsp[-2]+yyvsp[-1]).strString;
    if (strcmp(yyvsp[-8].strString, _strCurrentClass)==0) {
      if (strcmp(strReturnType+strlen(strReturnType)-4, "void")==0 ) {
        strReturnType = "";
      } else {
        yyerror("use 'void' as return type for constructors");
      }
    }
    fprintf(_fDeclaration, " %s %s %s %s;\n", 
      yyvsp[-12].strString, yyvsp[-11].strString, strReturnType, strFunctionHeader);
    fprintf(_fImplementation, "  %s %s::%s %s\n", 
      strReturnType, _strCurrentClass, strFunctionHeader, strFunctionBody);
  ;
    break;}
case 124:
#line 904 "ecc/parser.y"
{ yyval = "";;
    break;}
case 125:
#line 905 "ecc/parser.y"
{ yyval = " ~ "; ;
    break;}
case 126:
#line 909 "ecc/parser.y"
{ yyval = "";;
    break;}
case 127:
#line 910 "ecc/parser.y"
{ 
    if (_bClassIsExported) {
      yyval = ""; 
    } else {
      yyval = " DECL_DLL "; 
    }
  ;
    break;}
case 128:
#line 920 "ecc/parser.y"
{ yyval = "";;
    break;}
case 129:
#line 921 "ecc/parser.y"
{ yyval = yyvsp[0]; ;
    break;}
case 130:
#line 924 "ecc/parser.y"
{ yyval = "";;
    break;}
case 131:
#line 925 "ecc/parser.y"
{ yyval = yyvsp[0]; ;
    break;}
case 134:
#line 932 "ecc/parser.y"
{ yyval = "";;
    break;}
case 138:
#line 938 "ecc/parser.y"
{yyval = yyvsp[-2]+yyvsp[-1]+yyvsp[0];;
    break;}
case 139:
#line 941 "ecc/parser.y"
{ yyval=yyvsp[-1]+" "+yyvsp[0]; ;
    break;}
case 144:
#line 952 "ecc/parser.y"
{ yyval=yyvsp[-1]+" "+yyvsp[0]; ;
    break;}
case 145:
#line 953 "ecc/parser.y"
{ yyval=yyvsp[-1]+" "+yyvsp[0]; ;
    break;}
case 146:
#line 954 "ecc/parser.y"
{ yyval=yyvsp[-1]+" "+yyvsp[0]; ;
    break;}
case 147:
#line 955 "ecc/parser.y"
{ yyval=yyvsp[-1]+" "+yyvsp[0]; ;
    break;}
case 148:
#line 956 "ecc/parser.y"
{ yyval=yyvsp[-1]+" "+yyvsp[0]; ;
    break;}
case 149:
#line 957 "ecc/parser.y"
{ yyval=yyvsp[-1]+" "+yyvsp[0]; ;
    break;}
case 150:
#line 958 "ecc/parser.y"
{ yyval=yyvsp[-1]+" "+yyvsp[0]; ;
    break;}
case 151:
#line 959 "ecc/parser.y"
{ yyval=yyvsp[-1]+" "+yyvsp[0]; ;
    break;}
case 152:
#line 960 "ecc/parser.y"
{ yyval=yyvsp[-3]+" "+yyvsp[-2]+" "+yyvsp[-1]+" "+yyvsp[0]; ;
    break;}
case 153:
#line 968 "ecc/parser.y"
{ yyval = "";;
    break;}
case 154:
#line 969 "ecc/parser.y"
{yyval = yyvsp[-1]+yyvsp[0];;
    break;}
case 155:
#line 973 "ecc/parser.y"
{ yyval = "-1"; ;
    break;}
case 156:
#line 974 "ecc/parser.y"
{
    yyval = SType("STATE_")+yyvsp[-3]+"_"+yyvsp[0];
  ;
    break;}
case 157:
#line 980 "ecc/parser.y"
{
    char *strProcedureName = yyvsp[-4].strString;
    char strInputEventType[80];
    char strInputEventName[80];
    sscanf(yyvsp[-2].strString, "%s %s", strInputEventType, strInputEventName);

    char strStateID[256];
    const char *strBaseStateID = "-1";
    if(strcmp(RemoveLineDirective(strProcedureName), "Main")==0){
      strcpy(strStateID, "1");
      if(strncmp(strInputEventType, "EVoid", 4)!=0 && _strCurrentThumbnail[2]!=0) {
        yyerror("procedure 'Main' can take input parameters only in classes without thumbnails");
      }
    } else {
      sprintf(strStateID, "0x%08x", CreateID());
    }

    sprintf(_strCurrentStateID, "STATE_%s_%s", 
      _strCurrentClass, RemoveLineDirective(strProcedureName));
    fprintf(_fDeclaration, "#define  %s %s\n", _strCurrentStateID, strStateID);
    AddHandlerFunction(strProcedureName, strStateID, yyvsp[0].strString);
    fprintf(_fImplementation, 
      "BOOL %s::%s(const CEntityEvent &__eeInput) {\n#undef STATE_CURRENT\n#define STATE_CURRENT %s\n", 
      _strCurrentClass, strProcedureName, _strCurrentStateID);
    fprintf(_fImplementation, 
      "  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_%s, \"%s::%s expects '%s' as input!\");",
      strInputEventType, _strCurrentClass, RemoveLineDirective(strProcedureName), 
      strInputEventType);
    fprintf(_fImplementation, "  const %s &%s = (const %s &)__eeInput;",
      strInputEventType, strInputEventName, strInputEventType);

  ;
    break;}
case 158:
#line 1011 "ecc/parser.y"
{
    char *strFunctionBody = yyvsp[-2].strString;
    fprintf(_fImplementation, "%s ASSERT(FALSE); return TRUE;};", strFunctionBody);
  ;
    break;}
case 159:
#line 1018 "ecc/parser.y"
{
    yyval="EVoid e";
  ;
    break;}
case 160:
#line 1021 "ecc/parser.y"
{
    yyval=yyvsp[0]+" e";
  ;
    break;}
case 161:
#line 1024 "ecc/parser.y"
{
    yyval=yyvsp[-1]+" "+yyvsp[0];
  ;
    break;}
case 167:
#line 1031 "ecc/parser.y"
{yyval = yyvsp[0] + " ";;
    break;}
case 188:
#line 1034 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 189:
#line 1035 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 190:
#line 1036 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 191:
#line 1037 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 192:
#line 1038 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 193:
#line 1039 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 194:
#line 1040 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 195:
#line 1041 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 196:
#line 1042 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 197:
#line 1043 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 198:
#line 1044 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 199:
#line 1045 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 200:
#line 1046 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 201:
#line 1047 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 202:
#line 1048 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 203:
#line 1049 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 204:
#line 1050 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 205:
#line 1051 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 206:
#line 1052 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 207:
#line 1053 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 208:
#line 1054 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 209:
#line 1055 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 210:
#line 1056 "ecc/parser.y"
{yyval=yyvsp[-2]+yyvsp[-1]+yyvsp[0];;
    break;}
case 211:
#line 1057 "ecc/parser.y"
{yyval=yyvsp[-2]+yyvsp[-1]+yyvsp[0];;
    break;}
case 212:
#line 1058 "ecc/parser.y"
{yyval = yyvsp[-2]+yyvsp[-1]+yyvsp[0];;
    break;}
case 213:
#line 1059 "ecc/parser.y"
{yyval = yyvsp[-1]+" "+yyvsp[0];;
    break;}
case 245:
#line 1072 "ecc/parser.y"
{yyval = yyvsp[0] + " ";;
    break;}
case 246:
#line 1079 "ecc/parser.y"
{ yyval = "";;
    break;}
case 247:
#line 1080 "ecc/parser.y"
{ yyval = yyvsp[-1]+yyvsp[0]; ;
    break;}
case 248:
#line 1083 "ecc/parser.y"
{yyval=yyvsp[-1]+yyvsp[0];;
    break;}
case 249:
#line 1084 "ecc/parser.y"
{yyval=yyvsp[-6]+yyvsp[-5]+yyvsp[-4]+yyvsp[-3]+yyvsp[-2]+yyvsp[-1]+yyvsp[0];;
    break;}
case 250:
#line 1085 "ecc/parser.y"
{yyval=yyvsp[-2]+" "+yyvsp[-1]+yyvsp[0]+" ";;
    break;}
case 251:
#line 1086 "ecc/parser.y"
{yyval=yyvsp[-2]+yyvsp[-1]+yyvsp[0];;
    break;}
case 252:
#line 1087 "ecc/parser.y"
{yyval=yyvsp[-3]+yyvsp[-2]+yyvsp[-1]+yyvsp[0];;
    break;}
case 269:
#line 1108 "ecc/parser.y"
{
    if (yyvsp[-1].bCrossesStates) {
      char strAfterIfName[80], strAfterIfID[11];
      CreateInternalHandlerFunction(strAfterIfName, strAfterIfID);
      yyval = yyvsp[-6]+"(!"+yyvsp[-5]+yyvsp[-4]+yyvsp[-3]+"){ Jump(STATE_CURRENT,"+strAfterIfID+", FALSE, EInternal());return TRUE;}"+yyvsp[-1]+
        "Jump(STATE_CURRENT,"+strAfterIfID+", FALSE, EInternal());return TRUE;}"+
        "BOOL "+_strCurrentClass+"::"+strAfterIfName+"(const CEntityEvent &__eeInput){"+
        "\nASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);"+
        "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+strAfterIfID+"\n";
    } else {
      yyval = yyvsp[-6]+yyvsp[-5]+yyvsp[-4]+yyvsp[-3]+yyvsp[-2]+yyvsp[-1]+yyvsp[0];
    }
  ;
    break;}
case 270:
#line 1124 "ecc/parser.y"
{
    if (yyvsp[-3].bCrossesStates || yyvsp[0].bCrossesStates) {
      char strAfterIfName[80], strAfterIfID[11];
      char strElseName[80], strElseID[11];
      CreateInternalHandlerFunction(strAfterIfName, strAfterIfID);
      CreateInternalHandlerFunction(strElseName, strElseID);
      yyval = yyvsp[-8]+"(!"+yyvsp[-7]+yyvsp[-6]+yyvsp[-5]+"){ Jump(STATE_CURRENT,"+strElseID+", FALSE, EInternal());return TRUE;}"+
        yyvsp[-3]+"Jump(STATE_CURRENT,"+strAfterIfID+", FALSE, EInternal());return TRUE;}"+
        "BOOL "+_strCurrentClass+"::"+strElseName+"(const CEntityEvent &__eeInput){"+
        "\nASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);"+
        "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+strElseID+"\n"+
        yyvsp[0]+"Jump(STATE_CURRENT,"+strAfterIfID+", FALSE, EInternal());return TRUE;}\n"+
        "BOOL "+_strCurrentClass+"::"+strAfterIfName+"(const CEntityEvent &__eeInput){"+
        "\nASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);"+
        "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+strAfterIfID+"\n";
    } else {
      yyval = yyvsp[-8]+yyvsp[-7]+yyvsp[-6]+yyvsp[-5]+yyvsp[-4]+yyvsp[-3]+yyvsp[-2]+yyvsp[-1]+" "+yyvsp[0];
    }
  ;
    break;}
case 271:
#line 1146 "ecc/parser.y"
{
    if (strlen(_strInLoopName)>0) {
      yyerror("Nested loops are not implemented yet");
    }
  ;
    break;}
case 272:
#line 1150 "ecc/parser.y"
{
    if (yyvsp[-1].bCrossesStates) {
      CreateInternalHandlerFunction(_strInLoopName, _strInLoopID);
      CreateInternalHandlerFunction(_strAfterLoopName, _strAfterLoopID);
      yyval = SType(GetLineDirective(yyvsp[-7]))+"Jump(STATE_CURRENT,"+_strInLoopID+", FALSE, EInternal());return TRUE;}"+
        "BOOL "+_strCurrentClass+"::"+_strInLoopName+"(const CEntityEvent &__eeInput)"+yyvsp[-2]+
        "\nASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);"+
        "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strInLoopID+"\n"+
        "if(!"+yyvsp[-6]+yyvsp[-5]+yyvsp[-4]+"){ Jump(STATE_CURRENT,"+_strAfterLoopID+", FALSE, EInternal());return TRUE;}"+
        yyvsp[-1]+"Jump(STATE_CURRENT,"+_strInLoopID+", FALSE, EInternal());return TRUE;"+yyvsp[0]+
        "BOOL "+_strCurrentClass+"::"+_strAfterLoopName+"(const CEntityEvent &__eeInput) {"+
        "\nASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);"+
        "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strAfterLoopID+"\n";
    } else {
      yyval = yyvsp[-7]+yyvsp[-6]+yyvsp[-5]+yyvsp[-4]+yyvsp[-2]+yyvsp[-1]+yyvsp[0];
    } 
    _strInLoopName[0] = 0;
  ;
    break;}
case 273:
#line 1171 "ecc/parser.y"
{
    if (strlen(_strInLoopName)>0) {
      yyerror("Nested loops are not implemented yet");
    }
    _strInLoopName[0] = 0;
  ;
    break;}
case 274:
#line 1176 "ecc/parser.y"
{
    if (yyvsp[-7].bCrossesStates) {
      CreateInternalHandlerFunction(_strInLoopName, _strInLoopID);
      CreateInternalHandlerFunction(_strAfterLoopName, _strAfterLoopID);
      yyval = SType(GetLineDirective(yyvsp[-9]))+"Jump(STATE_CURRENT,"+_strInLoopID+", FALSE, EInternal());return TRUE;}"+
        "BOOL "+_strCurrentClass+"::"+_strInLoopName+"(const CEntityEvent &__eeInput)"+yyvsp[-8]+
        "\nASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);"+
        "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strInLoopID+"\n"+yyvsp[-7]+
        "if(!"+yyvsp[-3]+yyvsp[-2]+yyvsp[-1]+"){ Jump(STATE_CURRENT,"+_strAfterLoopID+", FALSE, EInternal());return TRUE;}"+
        "Jump(STATE_CURRENT,"+_strInLoopID+", FALSE, EInternal());return TRUE;"+yyvsp[-6]+
        "BOOL "+_strCurrentClass+"::"+_strAfterLoopName+"(const CEntityEvent &__eeInput) {"+
        "\nASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);"+
        "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strAfterLoopID+"\n";
    } else {
      yyval = yyvsp[-9]+yyvsp[-8]+yyvsp[-7]+yyvsp[-6]+yyvsp[-4]+yyvsp[-3]+yyvsp[-2]+yyvsp[-1]+yyvsp[0];
    } 
    _strInLoopName[0] = 0;
  ;
    break;}
case 275:
#line 1197 "ecc/parser.y"
{
    if (strlen(_strInLoopName)>0) {
      yyerror("Nested loops are not implemented yet");
    }
  ;
    break;}
case 276:
#line 1201 "ecc/parser.y"
{
    if (yyvsp[-1].bCrossesStates) {
      CreateInternalHandlerFunction(_strInLoopName, _strInLoopID);
      CreateInternalHandlerFunction(_strAfterLoopName, _strAfterLoopID);
      yyerror("For loops across states are not supported");
    } else {
      yyval = yyvsp[-11]+yyvsp[-10]+yyvsp[-9]+yyvsp[-8]+yyvsp[-7]+yyvsp[-6]+yyvsp[-5]+yyvsp[-4]+yyvsp[-2]+yyvsp[-1]+yyvsp[0];
    } 
    _strInLoopName[0] = 0;
  ;
    break;}
case 277:
#line 1214 "ecc/parser.y"
{
      if (!_bInProcedure) {
        yyerror("Cannot have 'wait' in functions");
      }
      CreateInternalHandlerFunction(_strInWaitName, _strInWaitID);
      CreateInternalHandlerFunction(_strAfterWaitName, _strAfterWaitID);
      _bHasOtherwise = 0;
      _bInHandler = 1;
  ;
    break;}
case 278:
#line 1222 "ecc/parser.y"
{
    if (yyvsp[-1].bCrossesStates) {
      yyerror("'wait' statements must not be nested");
      yyval = "";
    } else {
      SType stDefault;
      if (!_bHasOtherwise) {
        stDefault = SType("default: return FALSE; break;");
      } else {
        stDefault = SType("");
      }

      yyval = SType(GetLineDirective(yyvsp[-5]))+yyvsp[-4]+";\n"+
        "Jump(STATE_CURRENT, "+_strInWaitID+", FALSE, EBegin());return TRUE;}"+
        "BOOL "+_strCurrentClass+"::"+_strInWaitName+"(const CEntityEvent &__eeInput) {"+
        "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strInWaitID+"\n"+
        "switch(__eeInput.ee_slEvent)"+yyvsp[-2]+yyvsp[-1]+stDefault+yyvsp[0]+
        "return TRUE;}BOOL "+_strCurrentClass+"::"+_strAfterWaitName+"(const CEntityEvent &__eeInput){"+
        "\nASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);"+
        "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strAfterWaitID+"\n";
      yyval.bCrossesStates = 1;
      _bInHandler = 0;
    }
  ;
    break;}
case 279:
#line 1248 "ecc/parser.y"
{
    if (!_bInProcedure) {
      yyerror("Cannot have 'autowait' in functions");
    }
    CreateInternalHandlerFunction(_strInWaitName, _strInWaitID);
    CreateInternalHandlerFunction(_strAfterWaitName, _strAfterWaitID);
    _bHasOtherwise = 0;

    yyval = SType(GetLineDirective(yyvsp[-2]))+yyvsp[-1]+";\n"+
      "Jump(STATE_CURRENT, "+_strInWaitID+", FALSE, EBegin());return TRUE;}"+
      "BOOL "+_strCurrentClass+"::"+_strInWaitName+"(const CEntityEvent &__eeInput) {"+
      "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strInWaitID+"\n"+
      "switch(__eeInput.ee_slEvent) {"+
      "case EVENTCODE_EBegin: return TRUE;"+
      "case EVENTCODE_ETimer: Jump(STATE_CURRENT,"+_strAfterWaitID+", FALSE, EInternal()); return TRUE;"+
      "default: return FALSE; }}"+
      "BOOL "+_strCurrentClass+"::"+_strAfterWaitName+"(const CEntityEvent &__eeInput){"+
      "\nASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);"+
      "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strAfterWaitID+"\n"+yyvsp[0];
    yyval.bCrossesStates = 1;
  ;
    break;}
case 280:
#line 1272 "ecc/parser.y"
{
    if (!_bInProcedure) {
      yyerror("Cannot have 'autocall' in functions");
    }
    CreateInternalHandlerFunction(_strInWaitName, _strInWaitID);
    CreateInternalHandlerFunction(_strAfterWaitName, _strAfterWaitID);
    _bHasOtherwise = 0;

    yyval = SType(GetLineDirective(yyvsp[-4]))+yyvsp[-3]+";\n"+
      "Jump(STATE_CURRENT, "+_strInWaitID+", FALSE, EBegin());return TRUE;}"+
      "BOOL "+_strCurrentClass+"::"+_strInWaitName+"(const CEntityEvent &__eeInput) {"+
      "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strInWaitID+"\n"+
      "switch(__eeInput.ee_slEvent) {"+
      "case EVENTCODE_EBegin: return TRUE;"+
      "case EVENTCODE_"+yyvsp[-2]+": Jump(STATE_CURRENT,"+_strAfterWaitID+", FALSE, __eeInput); return TRUE;"+
      "default: return FALSE; }}"+
      "BOOL "+_strCurrentClass+"::"+_strAfterWaitName+"(const CEntityEvent &__eeInput){"+
      "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strAfterWaitID+"\n"+
      "const "+yyvsp[-2]+"&"+yyvsp[-1]+"= ("+yyvsp[-2]+"&)__eeInput;\n"+yyvsp[0];
    yyval.bCrossesStates = 1;
  ;
    break;}
case 281:
#line 1297 "ecc/parser.y"
{
    yyval = SType("__e");
  ;
    break;}
case 282:
#line 1300 "ecc/parser.y"
{
    yyval = yyvsp[0];
  ;
    break;}
case 283:
#line 1305 "ecc/parser.y"
{
    if (!_bInProcedure) {
      yyerror("Cannot have 'autocall' in functions");
    }
    CreateInternalHandlerFunction(_strInWaitName, _strInWaitID);
    CreateInternalHandlerFunction(_strAfterWaitName, _strAfterWaitID);
    _bHasOtherwise = 0;

    yyval = SType(GetLineDirective(yyvsp[-7]))+yyvsp[-6]+";\n"+
      "Jump(STATE_CURRENT, "+_strInWaitID+", FALSE, EBegin());return TRUE;}"+
      "BOOL "+_strCurrentClass+"::"+_strInWaitName+"(const CEntityEvent &__eeInput) {"+
      "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strInWaitID+"\n"+
      "switch(__eeInput.ee_slEvent) {"+
      "case EVENTCODE_EBegin: Call"+yyvsp[-5]+"STATE_CURRENT, "+yyvsp[-6]+", "+yyvsp[-4]+yyvsp[-3]+";return TRUE;"+
      "case EVENTCODE_"+yyvsp[-2]+": Jump(STATE_CURRENT,"+_strAfterWaitID+", FALSE, __eeInput); return TRUE;"+
      "default: return FALSE; }}"+
      "BOOL "+_strCurrentClass+"::"+_strAfterWaitName+"(const CEntityEvent &__eeInput){"+
      "\n#undef STATE_CURRENT\n#define STATE_CURRENT "+_strAfterWaitID+"\n"+
      "const "+yyvsp[-2]+"&"+yyvsp[-1]+"= ("+yyvsp[-2]+"&)__eeInput;\n"+yyvsp[0];
    yyval.bCrossesStates = 1;
  ;
    break;}
case 284:
#line 1329 "ecc/parser.y"
{
    yyval = SType("SetTimerAt(THINKTIME_NEVER)"); 
  ;
    break;}
case 285:
#line 1332 "ecc/parser.y"
{
    yyval = SType("SetTimerAfter")+yyvsp[-2]+yyvsp[-1]+yyvsp[0]; 
  ;
    break;}
case 286:
#line 1338 "ecc/parser.y"
{
    if (!_bInProcedure) {
      yyerror("Cannot have 'jump' in functions");
    }
    yyval = SType(GetLineDirective(yyvsp[-5]))+"Jump"+yyvsp[-3]+"STATE_CURRENT, "+yyvsp[-4]+", "+yyvsp[-2]+yyvsp[-1]+";return TRUE;";
  ;
    break;}
case 287:
#line 1347 "ecc/parser.y"
{
    if (!_bInProcedure) {
      yyerror("Cannot have 'call' in functions");
    }
    if (!_bInHandler) {
      yyerror("'call' must be inside a 'wait' statement");
    }
    yyval = SType(GetLineDirective(yyvsp[-5]))+"Call"+yyvsp[-3]+"STATE_CURRENT, "+yyvsp[-4]+", "+yyvsp[-2]+yyvsp[-1]+";return TRUE;";
  ;
    break;}
case 288:
#line 1359 "ecc/parser.y"
{ 
    yyval = yyvsp[0];
  ;
    break;}
case 289:
#line 1362 "ecc/parser.y"
{
    yyval = SType("EVoid()");
  ;
    break;}
case 290:
#line 1368 "ecc/parser.y"
{
    yyval = SType("STATE_")+_strCurrentClass+"_"+yyvsp[0]+", TRUE";
  ;
    break;}
case 291:
#line 1371 "ecc/parser.y"
{
    yyval = SType("STATE_")+yyvsp[-3]+"_"+yyvsp[0]+", FALSE";
  ;
    break;}
case 292:
#line 1377 "ecc/parser.y"
{
    yyval = SType(GetLineDirective(yyvsp[-1]))+"UnsetTimer();Jump(STATE_CURRENT,"
      +_strAfterWaitID+", FALSE, EInternal());"+"return TRUE"+yyvsp[0];
  ;
    break;}
case 293:
#line 1383 "ecc/parser.y"
{
    yyval = SType(GetLineDirective(yyvsp[-1]))+"return TRUE"+yyvsp[0];
  ;
    break;}
case 294:
#line 1388 "ecc/parser.y"
{
    yyval = SType(GetLineDirective(yyvsp[-1]))+"return FALSE"+yyvsp[0];
  ;
    break;}
case 295:
#line 1393 "ecc/parser.y"
{
    if (!_bInProcedure) {
      yyval = yyvsp[-2]+" "+yyvsp[-1]+yyvsp[0];
    } else {
      if (strlen(yyvsp[-1].strString)==0) {
        yyvsp[-1] = SType("EVoid()");
      }
      yyval = SType(GetLineDirective(yyvsp[-2]))
        +"Return(STATE_CURRENT,"+yyvsp[-1]+");"
        +yyvsp[-2]+" TRUE"+yyvsp[0];
    }
  ;
    break;}
case 296:
#line 1407 "ecc/parser.y"
{yyval = "";;
    break;}
case 298:
#line 1412 "ecc/parser.y"
{
    char strInputEventType[80];
    char strInputEventName[80];
    sscanf(yyvsp[-6].strString, "%s %s", strInputEventType, strInputEventName);

    yyval = SType("case")+yyvsp[-7]+"EVENTCODE_"+strInputEventType+yyvsp[-5]+yyvsp[-4]+yyvsp[-3]+
      "const "+strInputEventType+"&"+strInputEventName+"= ("+
      strInputEventType+"&)__eeInput;\n"+yyvsp[-2]+yyvsp[-1]+"ASSERT(FALSE);break;";
  ;
    break;}
case 299:
#line 1421 "ecc/parser.y"
{
    char strInputEventType[80];
    char strInputEventName[80];
    sscanf(yyvsp[-6].strString, "%s %s", strInputEventType, strInputEventName);

    yyval = SType("default")+yyvsp[-4]+yyvsp[-3]+yyvsp[-2]+yyvsp[-1]+"ASSERT(FALSE);break;";
    _bHasOtherwise = 1;
  ;
    break;}
case 300:
#line 1431 "ecc/parser.y"
{ yyval = "";;
    break;}
case 301:
#line 1432 "ecc/parser.y"
{ yyval = yyvsp[-1]+yyvsp[0]; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1435 "ecc/parser.y"

